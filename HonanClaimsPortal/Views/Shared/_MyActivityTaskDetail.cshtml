
@model HonanClaimsWebApi.Models.Claim.ActivityTaskDetail

@{ var userObj = Session[HonanClaimsPortal.Helpers.SessionHelper.claimTeamLogin] as HonanClaimsWebApiAccess1.LoginServices.ClaimTeamLoginModel; }

<script>
    $(function () {

        $('.dateCalendar').datetimepicker({
            format: 'DD/MM/YYYY'
        });


        $('#frmActivityTask').submit(function (e) {

            if ($(this).valid()) {
                $.LoadingOverlay("show");
            }
        });


    });


    function GetResult_AT(data) {

        if ($('#ActivityTasksDetailModal').length > 0) {
            $('#ActivityTasksDetailModal').modal('hide');
        }

        $.LoadingOverlay("hide");
        RefreshActivityTasksGrid();
        generateKeyContactsGrid();
        generateKeyDateGrid();
        $("#Last_Task_Completed_Dtl_String").val("");
        lastTaskCompletedDate();
    }

    function GetResult_AT_Failure(data)
    {
        RefreshActivityTasksGrid();
        generateKeyContactsGrid();
        generateKeyDateGrid();
        $.LoadingOverlay("hide");
        bootbox.alert("Error occured.");
    }


</script>

<style>
    #gridActivityWorkFlowNextSteps .k-grid-content.k-auto-scrollable {
        height: 150px;
    }
</style>


@using (Ajax.BeginForm("_MyActivityTaskDetail", "MyActivity", new AjaxOptions { HttpMethod = "POST", OnSuccess = "GetResult_AT", OnFailure = "GetResult_AT_Failure", UpdateTargetId = "divFakeActivityTask" }, new { @id = "frmActivityTask", enctype = "multipart/form-data" }))
{
    @*@Html.ValidationSummary(false)*@

    @Html.HiddenFor(o => o.H_Claimsid_Dtl)
    @Html.HiddenFor(o => o.Owner_Company_Dtl)
    @Html.HiddenFor(o => o.Owner_Contact_Dtl)
    @Html.HiddenFor(o => o.Last_Task_Completed_Dtl)
    @Html.HiddenFor(o => o.Next_Seq_Dtl)
    @Html.HiddenFor(o => o.Completed_By_Dtl)
    @Html.HiddenFor(o => o.H_Activitytasksid_Dtl)
    @Html.HiddenFor(o => o.IsNew)
    @*@Html.HiddenFor(o => o.Seq_Dtl)*@
    @*@Html.HiddenFor(o => o.Stage_Dtl)*@
    @Html.HiddenFor(o => o.NextActivityId)
    @Html.HiddenFor(o => o.NextActivityDue)


    <input type="hidden" id="Next_Seq_Dtl_Temp" name="Next_Seq_Dtl_Name" />



    <div style="display:none" id="divFakeActivityTask"></div>

    <div class="col-md-6">

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Seq</label>
                <div class="col-sm-3">

                    @Html.TextBoxFor(o => o.Seq_Dtl, new { @class = "form-control input-sm disabled", @readonly = true })
                    @*@{
                        string selectedVal = "";
                        var list = (List<System.Web.Mvc.SelectListItem>)ViewBag.Sequence;
                    }


                    @if (string.IsNullOrEmpty(Model.H_Activitytasksid_Dtl))
                    {
                        Model.Seq_Dtl = Convert.ToInt32(list.Last().Value.ToString());
                    }

                    @Html.DropDownListFor(model => model.Seq_Dtl, new SelectList(list, "Value", "Text", selectedVal), "",
                   new { @class = "form-control input-sm disabled", @disabled = true })*@
                </div>
                <label class="col-sm-1 control-label input-sm">Stage</label>
                <div class="col-sm-4">
                    @*@Html.DropDownListFor(model => model.Stage_Dtl, new SelectList(ViewBag.Stage, "Value", "Text"), "", new { @class = "form-control input-sm disabled", @disabled = true })*@
                    @Html.TextBoxFor(o => o.Stage_Dtl, new { @class = "form-control input-sm disabled", @readonly = true })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Action</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Actionid_Dtl, new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                <label class="col-sm-4 control-label input-sm">Details</label>
                <div class="col-sm-8 tabm">
                    @Html.TextAreaFor(o => o.Details_Dtl, new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                <label class="col-sm-4 control-label input-sm">Owner Type</label>
                <div class="col-sm-8 tabm">
                    @Html.DropDownListFor(o => o.Owner_Dtl, new SelectList(ViewBag.OwnerType, "Text", "Text"), "", new { @class = "form-control  input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Owner Account</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Owner_Company_Name_Dtl, new { @class = "form-control input-sm", @maxlength = 100 })
                        <span id="spnAccountNoModal_OwnerAccount" class="input-group-btn" data-toggle="modal" data-target="#AccountModal_ActivityTask">
                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                <i class="fa fa-binoculars"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Owner Contact</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Owner_Contact_Name_Dtl, new { @class = "form-control input-sm", @maxlength = 100 })
                        <span id="spnContactModal_ActivityTask" class="input-group-btn" data-toggle="modal" data-target="#ActivityTaskContactModal">
                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                <i class="fa fa-binoculars"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Phone</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Phone_Dtl, new { @class = "form-control input-sm", @maxlength = 100 })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Email</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Email_Dtl, new { @class = "form-control input-sm valueChanged", @maxlength = 200 })

                        <a id="aEmailClaimant_ActivityTask" class="input-group-addon btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px;">
                            <span class="fa fa-envelope"></span>
                        </a>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-6">

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">SLA (Days)</label>
                <div class="col-sm-8">
                    @*@Html.TextBoxFor(o => o.Sla_Days_Dtl, new { @class = "form-control input-sm", @maxlength = 100, @type = "number" })*@

                    @if (HonanClaimsPortal.Helpers.ClaimTeamManagers.IsClaimManager(userObj.Teams))
                    {
                        @Html.TextBoxFor(o => o.Sla_Days_Dtl, new { @class = "form-control input-sm", @maxlength = 100, @type = "number" })
                    }
                    else
                    {
                        @Html.TextBoxFor(o => o.Sla_Days_Dtl, new { @class = "form-control input-sm disabled", @maxlength = 100, @readonly = true, @type = "number" })
                    }
                </div>
            </div>
        </div>

        <div class="row" id="rowLastTask">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Last Task Completed</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Last_Task_Completed_Dtl_String, new { @class = "form-control input-sm disabled", @readonly = true, @maxlength = 100 })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">This Task Due Date</label>
                <div class="col-sm-8">

                    @if (HonanClaimsPortal.Helpers.ClaimTeamManagers.IsClaimManager(userObj.Teams))
                    {
                        <div id="dueDateActivityDetail" class="input-group date dateCalendar" style="width:100%">
                            @Html.TextBoxFor(o => o.This_Task_Due_Date_Dtl, new { @class = "form-control input-sm" })
                            <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>
                    }
                    else
                    {
                        @Html.TextBoxFor(o => o.This_Task_Due_Date_Dtl, "{0:dd/MM/yyyy}", new { @class = "form-control input-sm disabled", @readonly = true })
                    }

                    @*<div class="input-group date dateCalendar" style="width:100%">
                        @Html.TextBoxFor(o => o.This_Task_Due_Date_Dtl, new { @class = "form-control input-sm" })
                        <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>*@
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm"></label>
                <div class="col-sm-8">
                    <label class="col-sm-3 control-label input-sm">Completed</label>
                    <div class="col-sm-1">
                        @Html.CheckBoxFor(o => o.Completed_Dtl)
                    </div>
                    <label class="col-sm-3 control-label input-sm">N/A</label>
                    <div class="col-sm-1">
                        @Html.CheckBoxFor(o => o.Skipped_Dtl)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm"></label>
                <div class="col-sm-8">
                    <label class="col-sm-5 control-label input-sm pr0">High Priority</label>
                    <div class="pl0 col-sm-1">
                        @Html.CheckBoxFor(o => o.High_Priority_Task_Dtl)
                    </div>

                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Completed By</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Completed_By_Name_Dtl, new { @class = "form-control input-sm disabled", @readonly = true })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Completed Date</label>
                <div class="col-sm-8">
                    <div class="input-group date dateCalendar" style="width:100%" id="actualCompletedDate">
                        @Html.TextBoxFor(o => o.Completed_Date_Dtl, new { @class = "form-control input-sm" })
                        <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>
                    <input type="text" class="form-control input-sm" id="dummyCompletedDate" disabled />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Update Key Contacts</label>
                <div class="col-sm-8">
                    @Html.CheckBoxFor(o => o.Update_Key_Contacts_Dtl)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Update Key Date</label>
                <div class="col-sm-8">
                    @Html.CheckBoxFor(o => o.Update_Key_Date_Dtl)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Claim #</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.H_ClaimsRefid_Dtl, new { @class = "form-control input-sm disabledControl", @readonly = true })
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-12" style="padding-top:50px">
        <div class="footer text-right">
            <button type="button" class="mb-sm btn btn-default" data-dismiss="modal">Discard Changes</button>
            <button type="submit" class="mb-sm btn btn-primary" id="btnSaveActivityDetail">Save Changes</button>
        </div>
    </div>

                        }
<!-- Modal -->
<div id="AccountModal_ActivityTask" class="modal fade AccountModal_ActivityTask" role="dialog" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close AccountModal_ActivityTask_Close">&times;</button>
                <h4 class="modal-title">Owner Account</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_ActivityTaskAccountLookUp.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default AccountModal_ActivityTask_Close">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="ActivityTaskContactModal" class="modal fade ActivityTaskContactModal" role="dialog" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close ActivityTaskContactModal_Close">&times;</button>
                <h4 class="modal-title">Owner Contact</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_ActivityTaskContactLookUp.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default ActivityTaskContactModal_Close" id="ActivityTaskContactModal_Close">Close</button>
            </div>
        </div>
    </div>
</div>



<script>

    $(function () {

        loadThisTaskDueDate();

        $('#Sla_Days_Dtl').change(function () {

            loadThisTaskDueDate();
        });

        $("#H_ClaimsRefid_Dtl").val($("#Claim_Reference_Num").val());

        //if (!$(this).is(":checked")) {

        //    $("#Update_Key_Contacts_Dtl").prop("disabled", "disabled");
        //    $("#Update_Key_Date_Dtl").prop("disabled", "disabled");
        //}

        $('#aEmailClaimant_ActivityTask').click(function () {
            this.href = "mailto:" + $('#Email_Dtl').val() + "?Subject=Claim Reference # " + $("#H_ClaimsRefid_Dtl").val();
        });     

        $(".AccountModal_ActivityTask_Close").click(function () {
            $("#AccountModal_ActivityTask").modal("hide");
        });

        $(".ActivityTaskContactModal_Close").click(function () {
            $("#ActivityTaskContactModal").modal("hide");
        });

        $(".ActivityWorkFlowModal_Close").click(function () {
            RefreshActivityTasksGrid();
            generateKeyContactsGrid();
            generateKeyDateGrid();
            $("#ActivityWorkFlowModal").modal("hide");
        });

        $("#spnContactModal_ActivityTask").click(function () {
            $('#tbContact_ActivityTask').DataTable().ajax.reload(null, false);
        });

        $("#Skipped_Dtl").change(function () {

            if ($(this).is(":checked")) {

                $("#Completed_Date_Dtl").val("");
                $("#Completed_By_Dtl").val("");
                $("#dummyCompletedDate").val("");
                $("#Completed_By_Name_Dtl").val('');
                $("#Completed_Dtl").prop("checked", false);
                //$("#Update_Key_Contacts_Dtl").prop("disabled", "disabled");
                //$("#Update_Key_Date_Dtl").prop("disabled", "disabled");
            }
        });


        if ($("#Completed_Dtl").is(":checked"))
        {
            $("#actualCompletedDate").show();
            $("#dummyCompletedDate").hide();
            $("#isActivityCompletionGrid").val("false");
        }
        else
        {
            $("#actualCompletedDate").hide();
            $("#dummyCompletedDate").show();
            $("#isActivityCompletionGrid").val("false");
        }


        $("#Completed_Dtl").change(function () {

            if ($(this).is(":checked")) {

                $("#actualCompletedDate").show();
                $("#dummyCompletedDate").hide();
                //$("#Update_Key_Contacts_Dtl").prop("disabled", false);
                //$("#Update_Key_Date_Dtl").prop("disabled", false);
                $("#Completed_Date_Dtl").val('@DateTime.Now.ToString("dd/MM/yyyy")');
                $("#Completed_By_Name_Dtl").val('@ViewBag.CurrentUser');
                $("#Completed_By_Dtl").val('@ViewBag.CurrentUserId');
                $("#Skipped_Dtl").prop("checked", false);
                //LoadgridActivityWorkFlowNextStepsDetail(true, $("#Seq_Dtl").val());

            }
            else {

                //$("#Update_Key_Contacts_Dtl").prop("disabled", "disabled");
                //$("#Update_Key_Date_Dtl").prop("disabled", "disabled");
                $("#Completed_Date_Dtl").val("");
                $("#Completed_By_Dtl").val("");
                $("#Completed_By_Name_Dtl").val('');
                $("#actualCompletedDate").hide();
                $("#dummyCompletedDate").show();
                $("#dummyCompletedDate").val("");
            }

        });

        $("#Seq_Dtl").change(function () {

            if ($(this).val() == "1")
            {
                $("#Last_Task_Completed_Dtl").val("");
                $("#Last_Task_Completed_Dtl_String").val("");
                $("#rowLastTask").hide();
            }
            else
            {
                $("#Last_Task_Completed_Dtl").val(kendo.toString(kendo.parseDate('@ViewBag.MaxActDate'), 'dd/MM/yyyy'));
               // $("#Last_Task_Completed_Dtl_String").val(kendo.toString(kendo.parseDate('@ViewBag.MaxActDate'), 'dd/MM/yyyy'));
                $("#rowLastTask").show();
            }
        });

        if ($("#Seq_Dtl").val() == "1")
        {
            $("#Last_Task_Completed_Dtl").val("");
            $("#Last_Task_Completed_Dtl_String").val("");
            $("#rowLastTask").hide();
        }
        else
        {
            $("#Last_Task_Completed_Dtl").val(kendo.toString(kendo.parseDate('@ViewBag.MaxActDate'), 'dd/MM/yyyy'));
               // $("#Last_Task_Completed_Dtl_String").val(kendo.toString(kendo.parseDate('@ViewBag.MaxActDate'), 'dd/MM/yyyy'));
                $("#rowLastTask").show();

        }

        //$("#btnWorkFlowComplete").click(function () {

        //    $("#Next_Seq_Dtl").val($("#Next_Seq_Dtl_Temp").val());
        //    $("#nextSeq_wf").val($("#Next_Seq_Dtl_Temp").val());

        //    $("#NextActivityId").val($("#nextActivityId_wf").val());
        //    $("#NextActivityDue").val($("#txtWorkFlowCompletedDAte").val());

        //    if ($("#isActivityCompletionGrid").val() == 'true') {

        //        $.LoadingOverlay("show");
        //        alert("Calling Update");
        //        $.ajax({

        //            url: "/ClaimDetailTabs/UpdateNextActivityWorkFlow?activityTaskId=" + $("#activityTaskId_wf").val() + "&actionName=" + $("#action_wf").val()
        //            + "&actionSeq=" + $("#actionSeq_wf").val() + "&nextSeq=" + $("#nextSeq_wf").val() + "&nextActivityId=" + $("#nextActivityId_wf").val()
        //            + "&nextActivityDue=" + $("#txtWorkFlowCompletedDAte").val() + "&claimId=" + $("#H_Claimsid_Dtl").val(), success: function (result) {


        //            },
        //            complete: function () {

        //                $.LoadingOverlay("hide");
        //            }
        //        });

        //        RefreshActivityTasksGrid();
        //        generateKeyContactsGrid();
        //        generateKeyDateGrid();
        //    }

        //    $("#ActivityWorkFlowModal").modal('hide');

        //});



    });

    function loadThisTaskDueDate() {

        var date = $("#Last_Task_Completed_Dtl_String").val();
        var slaCount = $("#Sla_Days_Dtl").val();

        $.ajax({
            url: "/ClaimDetailTabs/getThisTaskDueDate?date=" + date + "&slaCount=" + slaCount, success: function (result) {

                $("#This_Task_Due_Date_Dtl").val(result);

            }
        });
    }

    function lastTaskCompletedDate()
    {
        $.ajax({
            url: "/ClaimDetailTabs/GetLast_Task_CompletedDate?claimId=" + $("#H_Claimsid_Dtl").val(), success: function (result) {

                $("#Last_Task_Completed_Dtl_String").val(result);
                $("#Last_Task_Completed_Dtl").val(result);
            }
        });
    }


    function LoadgridActivityWorkFlowNextStepsDetail(showpopUp, seqId)
    {

        $("#gridActivityWorkFlowNextSteps").kendoGrid({

            dataSource: {
                transport: {
                    read: "/ClaimDetailTabs/AjaxActivityWorkFlowLoad?claimId=" + $("#H_Claimsid_Dtl").val() + "&completingActionSeq=" + seqId,
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                },
                batch: false,
            },
            selectable: "row",
            filterable: true,
            navigatable: true,
            pageable: false,
            scrollable: true,
            sortable: true,
            dataBound: function (data) {
                var cnt = $('#gridActivityWorkFlowNextSteps').data('kendoGrid').dataSource.total();
                if (cnt > 0 && showpopUp)
                {
                    $("#ActivityWorkFlowModal").modal("show");
                    $("#txtWorkFlowCompletedDAte").val("");
                }
            },
            change: function (e) {
                var selectedRows = this.select();
                var selectedDataItems = [];
                for (var i = 0; i < selectedRows.length; i++) {
                    var dataItem = this.dataItem(selectedRows[i]);

                    var dCurrentId = "";

                    getNextTaskDueDate(dataItem.ActivityTaskId);

                    $("#Next_Seq_Dtl_Temp").val(dataItem.Seq_Act);
                    $("#nextActivityId_wf").val(dataItem.ActivityTaskId);
                    $("#nextActivityDue_wf").val(dataItem.DueDate_Act);
                }
                // selectedDataItems contains all selected data items
            },
            columns: [
                {
                    field: "ActivityTaskId",
                    title: "ActivityTaskId",
                    hidden: true
                },
                {
                    field: "DueDate_Act",
                    title: "DueDate_Act",
                    hidden: true
                },
                {
                    field: "Seq_Act",
                    title: "Seq"
                },
                {
                    field: "Stage_Act",
                    title: "Stage"
                },
                {
                    field: "Action_Act",
                    title: "Action",
                    template: "<div style='cursor: pointer;color:blue'>#= Action_Act #</div>"
                },
                {
                    field: "Owner_Act",
                    title: "Owner"
                },
                {
                    field: "Contact_Act",
                    title: "Contact"
                },
                {
                    field: "SLADays_Act",
                    title: "SLA (Days)"
                }
            ]
        });



    }

    function getNextTaskDueDate(nextTaskId) {

        $.ajax({
            url: "/ClaimDetailTabs/GetNextTaskDueDate?nextTaskId=" + nextTaskId, success: function (result) {
                $("#txtWorkFlowCompletedDAte").val(result);
                return result;
            }
        });
    }

    function clearActivityTaskDetails()
    {
        $("#txtWorkFlowCompletedDAte").val("");
        $("#activityTaskId_wf").val("");
        $("#action_wf").val("");
        $("#actionSeq_wf").val("");
        $("#nextSeq_wf").val("");
        $("#nextActivityId_wf").val("");
        $("#nextActivityDue").val("");

        $("#Stage_Dtl").val("");
        $("#Actionid_Dtl").val("");
        $("#Details_Dtl").val("");
        $("#Owner_Dtl").val("");
        $("#Owner_Company_Name_Dtl").val("");
        $("#Owner_Company_Dtl").val("");
        $("#Owner_Contact_Name_Dtl").val("");
        $("#Owner_Contact_Dtl").val("");
        $("#Phone_Dtl").val("");
        $("#Email_Dtl").val("");
        $("#Sla_Days_Dtl").val("0");

       // lastTaskCompletedDate();
        loadThisTaskDueDate();
        $("#Completed_Dtl").prop("checked", false);
        $("#Skipped_Dtl").prop("checked", false);
        $("#Completed_By_Name_Dtl").val("");
        $("#Completed_By_Dtl").val("");
        $("#Completed_Date_Dtl").val("");
        $("#Update_Key_Contacts_Dtl").prop("checked", false);
        $("#Update_Key_Date_Dtl").prop("checked", false);
        $("#actualCompletedDate").hide();
        $("#dummyCompletedDate").show();
        $("#Next_Seq_Dtl").val("0");
        $("#H_Activitytasksid_Dtl").val("");
        $("#Last_Task_Completed_Dtl_String").val("");
        $("#dummyCompletedDate").val("");
        $("#isActivityCompletionGrid").val("false");
    }



</script>
