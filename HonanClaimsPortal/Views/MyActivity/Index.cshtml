@model HonanClaimsWebApi.Models.MyActivity.ActivityReturnModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="content-wrapper">
    <h3>
        My Activity Deadlines
    </h3>
    <div class="col-md-3 mb">
        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Claim</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.ActivityClaim,
                    new SelectList(Model.ActivityClaim, "Code", "Text"),
                    "--Select--",
                    new { @class = "form-control input-sm", @onchange = "comboChange()" })
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3 mb">
        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Activity Owner</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.OwnerList,
                    new SelectList(Model.OwnerList, "Code", "Text"),
                    "--Select--",
                    new { @class = "form-control input-sm", @onchange = "comboChange()" })
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3 mb">
        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">User</label>
                <div class="col-sm-8">
                    @{
                        if (Model.Activityusers.Count > 0)
                        {
                            @Html.DropDownListFor(m => m.Activityusers,
                        new SelectList(Model.Activityusers, "Code", "Text"),
                        "--Select--",
                        new { @class = "form-control input-sm", @onchange = "comboChange()" })
                        }
                        else
                        {
                            <select disabled class="form-control" id="Activityusers"></select>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3 mb">
        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Customer</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.CustomerList,
                    new SelectList(Model.CustomerList, "Code", "Text"),
                    "--Select--",
                    new { @class = "form-control input-sm", @onchange = "comboChange()" })
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb">
        <div class="input-group">
            <input type="text" class="form-control  input-sm" placeholder="Search for" id="searchTxt" aria-describedby="basic-addon2">
            <span class="input-group-addon pointer" id="btnsearchtext" data-toggle="modal" data-target="#PolicyModal"><i class="fa fa-search" aria-hidden="true"></i></span>
        </div>
    </div>
    <div class="col-md-6 mb">
        <div class="form-inline">
            <div class="form-group mb-0">
                <input id="overdue" type="checkbox" value="true">
                <label class="ml-10 input-sm">Show OverDue</label>
            </div>
            <div class="form-group mb-0">
                <input id="fivedays" type="checkbox" value="true">
                <label class="ml-10 input-sm">Due next 5 days</label>
            </div>
            <div class="form-group mb-0">
                <input id="ShowDue" type="checkbox" value="true">
                <label class="ml-10 input-sm">Show with Due date</label>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb">
        <div class="pull-right">
            <button id="clearFilter" type="button" class="btn btn-sm btn-default mr-20">Clear Filter</button>
            <button id="filterList" type="button" class="btn btn-sm btn-primary">Filter Accounts</button>
        </div>
    </div>
       <div class="col-md-12 top-padding-eight">
           <div id="grid"></div>
       </div>
</div>

<div class="main-container">
    <div class="row mt-20">
        <div class="col-md-12">
            <div class="cust-search-1 mt-10">
                <h3 class="mt-20"></h3>
            </div>

            <div class="action-btn-2">
                <div class="pull-right mt-25">
                    
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="cust-search-1">

                
            </div>


            <div class="action-btn-2">
                <div class="pull-right mt-25">
                   
                </div>
            </div>
        </div>
    </div>

  
</div>

<script>
    $(document).ready(function () {
        $('#overdue').prop("checked", true);
        $('#ShowDue').prop("checked", true);
        loadactivity();
    });

    function loadactivity() {

        var customDateEditor = function (container, options) {
            $('<input />')
                .appendTo(container)
                .kendoDatePicker({
                    format: "dd/MMM/yyyy",
                    change: function () {
                        var value = this.value();
                        console.log(value); //value is the selected date in the datepicker
                        var dataItem = null
                        var grid = $("#grid").data("kendoGrid");
                        grid.select().each(function () {
                            dataItem = grid.dataItem($(this));
                        });

                        if (dataItem != null && value != null) {
                            callDueDateEdit(dataItem.ActivityTaskId, value);
                        }

                    }
                });
        };

        var overdue = true;
        var nextfiveday = false;
        var showwithdate = true;
        var claimId = null;
        var owner = null;
        var customerId = null;
        var search = null;
        var assignId = null;

        //Get value list
        overdue = $("#overdue").is(":checked");
        nextfiveday = $("#fivedays").is(":checked");
        showwithdate = $("#ShowDue").is(":checked");

        //overdue = $('#overdue').val();
        //nextfiveday = $('#fivedays').val();
        //showwithdate = $('#ShowDue').val();
        var c = $('#ActivityClaim').val();
        if (c != null && c != "") { claimId = c }
        var o = $('#OwnerList').val();
        if (o != null && o != "") { owner = o }
        var cl = $('#CustomerList').val();
        if (cl != null && cl != "") { customerId = cl }
        var s = $('#searchTxt').val();
        if (s != null && s != "") { search = s }
        var a = $('#Activityusers').val();
        if (a != null && a != "") { assignId = a }
        //load grid list
        $("#grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: "/MyActivity/GetMyActivity?overdue=" + overdue + "&nextfiveday=" + nextfiveday + "&showwithdate=" + showwithdate + "&claimId=" + claimId + "&owner=" + owner + "&customerId=" + customerId + "&searchtext=" + search + "&assignId=" + assignId
                },
                schema: {
                    model: {
                        id: "ActivityTaskId",
                        fields: {
                            ClaimRefNo: { editable: false },
                            Customer: { editable: false },
                            Seq: { editable: false },
                            Stage: { editable: false },
                            Action: { editable: false },
                            Owner: { editable: false },
                            Contact: { editable: false },
                            SLADays: { editable: false },
                            Complete: { editable: false }
                        }
                    }
                }
                //pageSize: 10,
                //serverPaging: false,
            },
            filterable: true,
            serverPaging: false,
            navigatable: true,
            height: 550,
            sortable: true,
            editable: true,
            selectable: "single",
            columns: [{
                hidden: true,
                field: "ActivityTaskId",
                title: "ActivityTaskId"

            },
            {
                field: "ClaimRefNo",
                title: "Claims Ref #",
            },
            {
                field: "Customer",
                title: "Customer",
            }, {
                field: "Seq",
                title: "Seq",
            }, {
                field: "Stage",
                title: "Stage",
            },
            {
                field: "Action",
                title: "Action",
            },
            {
                field: "Owner",
                title: "Owner",
            },
            {
                field: "Contact",
                title: "Contact",
            },
            {
                field: "SLADays",
                title: "SLA(Days)",
            },
            {
                field: "DueDate",
                format: "dd/MMM/yyyy",
                template: "#= kendo.toString(kendo.parseDate(DueDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #",
                editor: customDateEditor
            },
            {
                field: "Complete",
                template: '<input type="checkbox" #= Complete ? \'checked="checked" disabled\' : "" # class="chkbx" />', width: 110
            },
            {
                field: "CompletedDate",
                template: "#if(CompletedDate === null){#  #}else{# #= kendo.toString(kendo.parseDate(CompletedDate), 'dd-MM-yyyy') #  #}#"
            },
            ],
            dataBound: function (e) {
                // get the index of the UnitsInStock cell
                var columns = e.sender.columns;
                var columnIndex = this.wrapper.find(".k-grid-header [data-field=" + "ActivityTaskId" + "]").index();
                var today = new Date().setHours(0, 0, 0, 0);
                //var todayminus = new Date().setDate(new Date().getDate() - 1);
                // iterate the data items and apply row styles where necessary
                var dataItems = e.sender.dataSource.view();
                for (var j = 0; j < dataItems.length; j++) {

                    var datecol = dataItems[j].get("DueDate");
                    var compltecol = dataItems[j].get("Complete");
                    var date = new Date(parseInt(datecol.substr(6))).setHours(0, 0, 0, 0);

                    var dueminus = new Date(parseInt(datecol.substr(6))).setDate(-1);

                    var rid = dataItems[j].uid;
                    var row = e.sender.tbody.find("[data-uid='" + dataItems[j].uid + "']");
                    if (today >= date && compltecol == false) {
                        row.removeClass("Oneday");
                        row.addClass("OverDue");
                    }

                    //var dayDiff = new Date(parseInt(datecol.substr(6))).getDate() - new Date().getDate();
                    var dMonth = new Date(parseInt(datecol.substr(6))).getMonth() + 1;
                    var dYear = new Date(parseInt(datecol.substr(6))).getFullYear();
                    var dDay = new Date(parseInt(datecol.substr(6))).getDate();

                    var cDay = new Date().getDate();
                    var cMonth = new Date().getMonth() + 1;
                    var cYear = new Date().getFullYear();
                    var dif = dDay - cDay;

                    if (dYear == cYear && dMonth == cMonth && dif == 1 && compltecol == false) {
                        row.removeClass("OverDue");
                        row.addClass("Oneday");
                    }
                }
            }
        });

        function callDueDateEdit(activityId, datetime) {

            var month = datetime.getMonth() + 1;
            var date = datetime.getDate();
            var year = datetime.getFullYear();
            var dateonly = month + "/" + date + "/" + year;

            $.get("/MyActivity/UpdateDueDate?activityId=" + activityId + "&dateTime=" + dateonly, function (data) {
                $('#grid').data('kendoGrid').dataSource.read();
                $('#grid').data('kendoGrid').refresh();
            });
        }



        $("#grid .k-grid-content").on("change", "input.chkbx", function (e) {
            var grid = $("#grid").data("kendoGrid"),
                dataItem = grid.dataItem($(e.target).closest("tr"));
            $.get("/MyActivity/UpdateasComplete?activityId=" + dataItem.ActivityTaskId + "&actionis=" + true + "&claimId=" + dataItem.ClaimId, function (data) {
                $('#grid').data('kendoGrid').dataSource.read();
                $('#grid').data('kendoGrid').refresh();
            });

        });
    }

    function comboChange() {
        loadactivity();
    }

    $("#overdue, #fivedays , #ShowDue").change(function () {
        loadactivity();
    });

    $("#btnsearchtext").click(function () {
        loadactivity();
    })

    $("#clearFilter").click(function () {
        $('#overdue').prop("checked", true);
        $('#ShowDue').prop("checked", true);
        $('#fivedays').prop("checked", false);
        $('#ActivityClaim').val("");
        $('#CustomerList').val("");
        $('#searchTxt').val("");
        $('#Activityusers').val("");
        $('#OwnerList').val("");

        loadactivity();
    })

    $("#filterList").click(function () {
        loadactivity();
    })


</script>
<style>
    .OverDue {
        background-color: #ff6699 !important;
    }

    .Oneday {
        background-color: #ffcc99 !important;
    }
</style>