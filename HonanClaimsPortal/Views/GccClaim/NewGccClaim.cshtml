@using HonanClaimsWebApi.Models
@model HonanClaimsWebApi.Models.Claim.GccClaim

<!-- MOMENT JS-->
<script src="~/Content/vendor/moment/min/moment-with-locales.min.js"></script>
<!-- DATETIMEPICKER-->
<link href="~/Content/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<script src="~/Content/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>

<!-- SELECT2-->
<link rel="stylesheet" href="~/Content/vendor/select2/dist/css/select2.css">
<link rel="stylesheet" href="~/Content/vendor/select2-bootstrap-theme/dist/select2-bootstrap.css">

<script>
    $(document).ready(function () {


        $('.dateCalendar').datetimepicker({
            format: 'DD/MM/YYYY'
        });

    });
</script>

<div class="content-wrapper">
    <h3>

        New @Model.Claim_Type

    </h3>
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-body">
                @*<form role="form" class="form-horizontal" name="form.NewClaimGcc">
                *@
                @using (Html.BeginForm("NewGccClaim", "GccClaim", FormMethod.Post, new { id = "formNewGccClaim", enctype = "multipart/form-data" }))
                {
                    @Html.HiddenFor(o => o.Claim_Team)
                    @Html.HiddenFor(o => o.Claim_Type)
                    @Html.HiddenFor(o => o.Broker_Account_Id)
                    @Html.HiddenFor(o => o.Broker_Name_Id)
                    @Html.HiddenFor(o => o.Accountid)
                    @Html.HiddenFor(o => o.Assigned_User)
                    @Html.HiddenFor(o => o.Account_Name)

                    @*@Html.ValidationSummary(false)*@

                    <fieldset style="padding-bottom: 0px">

                        @*@if (Session[HonanCCp.CustomHelpers.SessionHelper.Page].ToString() == HonanCCp.CustomHelpers.PageTypes.Claim.ToString())
                            {*@

                        <div class="col-md-6 col-sm-12">
                            <div class="col-md-2"></div>
                            <div class="col-md-8" style="text-align: center; font-size: large;">
                                <div class="col-md-12 col-sm-12">
                                    <div class="panel widget bg-primary">
                                        <div class="row row-table">
                                            @*<div class="col-xs-4 text-center bg-primary-dark pv-lg">
                                                    <em class="icon-share fa-3x"></em>
                                                </div>*@
                                            <div class="col-xs-8 pv-xs">
                                                <div class="h3 m0 text-bold">Claim Reference #</div>
                                                <div class="text-uppercase">@Html.DisplayFor(item => item.Claim_Reference_Num)</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @Html.HiddenFor(o => o.Claim_Reference_Num)
                            </div>
                            <div class="col-md-2"></div>

                        </div>


                        <div class="col-md-6 col-sm-12">
                            <div class="form-group mb  has-feedback">
                                <label class="col-sm-3 control-label input-sm">Policy #</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        @Html.TextBoxFor(o => o.Policy_No, new { @class = "form-control input-sm", @maxlength = 200 })
                                        <span class="input-group-btn" data-toggle="modal" data-target="#PolicyModal">

                                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline">
                                                <i class="fa fa-binoculars"></i>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            </div>

                            @*<div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Policy Class</label>
                                    <div class="col-sm-9">
                                        @if (string.IsNullOrEmpty(Model.Policy_No))
                                        {
                                        @Html.TextBoxFor(o => o.Policy_No, new { @class = "form-control input-sm disabled", @readonly = true })
                                        }
                                        else if (!string.IsNullOrEmpty(Model.Policy_Class))
                                        {
                                        @Html.TextBoxFor(o => o.Policy_No, new { @class = "form-control input-sm disabled", @readonly = true })
                                        }
                                        else
                                        {
                                        @Html.DropDownListFor(model => model.Policy_Class, new SelectList(Model.Policy_Class_List, "Text", "Text"),
                                        new { @class = "form-control input-sm" })
                                        }
                                    </div>
                                </div>*@

                        </div>




                        @*}*@


                    </fieldset>

                    <div class="col-md-6 col-sm-12 m0 p0">

                        <fieldset>

                            @if (Model.Claim_Type == "Notification")
                            {
                                <div class="col-md-12 col-sm-12">
                                    <div class="form-group mb">
                                        <label class="col-sm-3 control-label input-sm">Notification Status</label>
                                        <div class="col-sm-9">
                                            @Html.DropDownListFor(model => model.Notification_Status, new SelectList(Model.Notification_Status_List, "Text", "Text"),
                                        new { @class = "form-control input-sm" })
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">* Reported Date</label>
                                <div class="col-sm-9">
                                    <div id="dtpReportedDate" class="input-group">
                                        @Html.TextBoxFor(o => o.Reported_Date, new { @class = "form-control input-sm" })
                                        <span class="input-group-addon btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                            <span class="fa fa-calendar"></span>
                                        </span>
                                    </div>
                                    @*@Html.ValidationMessageFor(o => o.Reported_Date, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            @*<div class="col-md-12 col-sm-12 form-group">
                                    <label class="col-sm-3 control-label input-sm">* Reported Time</label>
                                    <label class="col-sm-1 control-label input-sm text-right">HH</label>
                                    <div class="col-sm-3">

                                        @Html.DropDownListFor(m => m.Reported_TimeH, Enumerable.Range(0, 24).Select(i => new
                                        SelectListItem
                                        {
                                        Text = i.ToString().PadLeft(2, '0'),
                                        Value = i.ToString().PadLeft(2, '0')
                                        }), new { @class = "form-control input-sm" })
                                    </div>
                                    <label class="col-sm-1 control-label input-sm text-center">-</label>
                                    <label class="col-sm-1 control-label input-sm text-right">Min</label>
                                    <div class="col-sm-3">
                                        @Html.DropDownListFor(m => m.Reported_TimeM, Enumerable.Range(0, 60).Select(i => new
                                        SelectListItem
                                        {
                                        Text = i.ToString().PadLeft(2, '0'),
                                        Value = i.ToString().PadLeft(2, '0')
                                        }), new { @class = "form-control input-sm" })
                                    </div>
                                </div>*@

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">* Reported By</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Reported_By, new { @class = "form-control input-sm", @maxlength = 400 })
                                    @*@Html.ValidationMessageFor(o => o.Reported_By, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>


                        </fieldset>

                        <fieldset>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">* Incident Date</label>
                                <div class="col-sm-9">
                                    <div id="dtpIncidentDate" class="input-group">
                                        @Html.TextBoxFor(o => o.Incident_Date, new { @class = "form-control input-sm" })
                                        <span class="input-group-addon btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                            <span class="fa fa-calendar"></span>
                                        </span>
                                    </div>
                                    @*@Html.ValidationMessageFor(o => o.Incident_Date, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">* Incident Time</label>
                                <label class="col-sm-1 control-label input-sm text-right">HH</label>
                                <div class="col-sm-3">

                                    @Html.DropDownListFor(m => m.Incident_TimeH, Enumerable.Range(0, 24).Select(i => new
                                    SelectListItem
                               {
                                   Text = i.ToString().PadLeft(2, '0'),
                                   Value = i.ToString().PadLeft(2, '0')
                               }), new { @class = "form-control input-sm" })
                                    @*@Html.ValidationMessageFor(o => o.Incident_TimeH, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                                <label class="col-sm-1 control-label input-sm text-center">-</label>
                                <label class="col-sm-1 control-label input-sm text-right">Min</label>
                                <div class="col-sm-3">
                                    @Html.DropDownListFor(m => m.Incident_TimeM, Enumerable.Range(0, 60).Select(i => new
                                    SelectListItem
                               {
                                   Text = i.ToString().PadLeft(2, '0'),
                                   Value = i.ToString().PadLeft(2, '0')
                               }), new { @class = "form-control input-sm" })
                                    @*@Html.ValidationMessageFor(o => o.Incident_TimeM, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">* Incident Type</label>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(model => model.Incident_Type, new SelectList(Model.IncidentPartyTypeList, "Text", "Text"),
                                    new { @class = "form-control input-sm" })
                                    @*@Html.ValidationMessageFor(o => o.Incident_Type, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">* Incident Category</label>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(model => model.Incident_Category, new SelectList(Model.IncidentCategoryList, "Text", "Text"),
                                    new { @class = "form-control input-sm", @multiple = "multiple", @name = "Incident_Category" })
                                    @*@Html.ValidationMessageFor(o => o.Incident_Category, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group top-padding">
                                <label class="col-sm-3 control-label input-sm">* Incident Address</label>
                                <div class="col-sm-9">
                                    @Html.TextAreaFor(o => o.Incident_Address, new { @class = "form-control input-sm", @maxlength = 400 })
                                    @*@Html.ValidationMessageFor(o => o.Incident_Address, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group top-padding">
                                <label class="col-sm-3 control-label input-sm">* Incident Summary</label>
                                <div class="col-sm-9">
                                    @Html.TextAreaFor(o => o.Incident_Summary, new { @class = "form-control input-sm" })
                                    @*@Html.ValidationMessageFor(o => o.Incident_Summary, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })*@
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group top-padding">
                                <label class="col-sm-3 control-label input-sm">Claimant Firstname</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Claimant_First_Name, new { @class = "form-control input-sm", @maxlength = 200 })
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group top-padding">
                                <label class="col-sm-3 control-label input-sm">Claimant Lastname</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Claimant_Last_Name, new { @class = "form-control input-sm", @maxlength = 200 })
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">Claimant Phone (W)</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Claimant_Work_Phone, new { @class = "form-control input-sm", @maxlength = 200 })
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">Claimant Phone (H)</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Claimant_Home_Phone, new { @class = "form-control input-sm", @maxlength = 200 })
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">Claimant Phone (M)</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Claimant_Mobile_Phone, new { @class = "form-control input-sm", @maxlength = 200 })
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group">
                                <label class="col-sm-3 control-label input-sm">Claimant Address</label>
                                <div class="col-sm-9">
                                    @Html.TextAreaFor(o => o.Claimant_Address, new { @class = "form-control input-sm", @maxlength = 400 })
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 form-group top-padding">
                                <label class="col-sm-3 control-label input-sm">Email Address</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(o => o.Email_Address, new { @class = "form-control input-sm", @maxlength = 200 })
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12 form-group mb">
                                <label class="col-sm-3 control-label input-sm">Special Instructions</label>
                                <div class="col-sm-9">
                                    @Html.TextAreaFor(o => o.Special_Instructions, new { @class = "form-control input-sm valueChanged", @maxlength = 400 })
                                </div>
                            </div>

                        </fieldset>

                    </div>

                    <div class="col-md-6 col-sm-12 m0 p0">
                        <fieldset>

                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Client Group</label>
                                    <div class="col-sm-9">
                                        @*@Html.DropDownListFor(model => model.Client_Group, new SelectList(Model.Client_Group_List, "Text", "Text"),
                                            new { @class = "form-control input-sm" })*@
                                        @Html.TextBoxFor(o => o.Client_Group, new { @class = "form-control input-sm", @maxlength = 200 })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insurer</label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            @Html.TextBoxFor(o => o.InsurerName, new { @class = "form-control input-sm", @maxlength = 100 })
                                            <span id="spnInsurerModal" class="input-group-btn" data-toggle="modal" data-target="#InsurerModal">
                                                <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                                    <i class="fa fa-binoculars"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insurer Ref</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(o => o.Insurer_Ref, new { @class = "form-control input-sm" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insured Name</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(o => o.Insured_Name, new { @class = "form-control input-sm", @maxlength = 200 })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insured Phone (W)</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(o => o.Insured_Work_Phone, new { @class = "form-control input-sm" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insured Phone (M)</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(o => o.Insured_Mobile_Phone, new { @class = "form-control input-sm" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insured Email</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(o => o.Insured_Email, new { @class = "form-control input-sm" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Insured Address</label>
                                    <div class="col-sm-9">
                                        @Html.TextAreaFor(o => o.Insured_Address, new { @class = "form-control input-sm" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Broker Name</label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            @Html.TextBoxFor(o => o.Broker_Name, new { @class = "form-control input-sm", @maxlength = 100 })
                                            <span id="brokerAccountNameModal" class="input-group-btn" data-toggle="modal" data-target="#ContactBrokerModal">
                                                <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                                    <i class="fa fa-binoculars"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Broker Account</label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            @Html.TextBoxFor(o => o.Broker_Account, new { @class = "form-control input-sm", @maxlength = 100 })
                                            <span id="brokerAccountNoModal" class="input-group-btn" data-toggle="modal" data-target="#AccountBrokerModal">
                                                <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                                    <i class="fa fa-binoculars"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">IDR</label>
                                    <div class="col-sm-9">
                                        @Html.DropDownListFor(model => model.Idr, new SelectList(Model.YesNoList),
                                        new { @class = "form-control input-sm" })
                                    </div>
                                </div>


                            </div>

                            <div class="col-md-12 col-sm-12">
                                <div class="form-group mb">
                                    <label class="col-sm-3 control-label input-sm">Attachments</label>
                                    <div class="col-md-9">
                                        <div id="multiple">
                                            <input type="file" class="multiple btn btn-default" name="upfiles" multiple style="width: 100%" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </fieldset>
                    </div>

                    <div class="col-md-12 col-sm-12 m0 p0">
                        <div class="panel-footer text-right">
                            <button type="button" onclick="Cancel()" class="mb-sm btn btn-default">Cancel</button>
                            <button id="btnSave" type="submit" class="mb-sm btn btn-primary">Save</button>
                        </div>
                    </div>

                }

            </div>


        </div>
    </div>
</div>


<!-- Modal -->
<div id="PolicyModal" class="modal fade PolicyModal" role="dialog" data-backdrop="false" style="padding-top: 10%;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Policy Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_PolicyLookup.cshtml", null, new ViewDataDictionary { { "PageId", "New" } })
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal -->
<div id="InsurerModal" class="modal fade InsurerModal" role="dialog" data-backdrop="false" style="padding-top: 10%;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Insurer Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_InsurerLookUp.cshtml", null) @*, new ViewDataDictionary { { "AccountId", (Session[HonanCCp.CustomHelpers.SessionHelper.LoginClient] as LoginClient).AccountId } })*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal -->
<div id="AccountBrokerModal" class="modal fade AccountBrokerModal" role="dialog" data-backdrop="false" style="padding-top: 10%;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Account Broker Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_AccountBrokerLookup.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="ContactBrokerModal" class="modal fade ContactBrokerModal" role="dialog" data-backdrop="false" style="padding-top: 10%;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Broker Name Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_ContactBrokerLookup.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- SELECT2-->
<script src="~/Content/vendor/select2/dist/js/select2.js"></script>

<!-- Loading gif-->
<script src="~/Scripts/loadingoverlay.min.js"></script>
<script src="~/Scripts/loadingoverlay_progress.min.js"></script>

<script>

    $(document).ready(function () {

        $('#dtpReportedDate').datetimepicker({
            maxDate: moment(),
            format: 'DD/MM/YYYY',
            useCurrent: false
        });

        $('#dtpIncidentDate').datetimepicker({
            maxDate: moment(),
            format: 'DD/MM/YYYY',
            useCurrent: false
        });

        $('#formNewGccClaim').submit(function () {
            if ($(this).valid()) {
                $.LoadingOverlay("show");
            }
        });

        $('#Incident_Category').select2({
            tags: true,
            theme: "bootstrap"
        });

        jQuery.validator.methods["date"] = function (value, element) { return true; }

        // Warning
        $(window).on('beforeunload', function () {
            return "Any changes will be lost";
        });

        // Form Submit
        $(document).on("submit", "form", function (event) {
            // disable unload warning
            $(window).off('beforeunload');
        });

        $("#brokerAccountNameModal").click(function () {
            $('#tbContactBroker').DataTable().ajax.reload(null, false);
        });

        $('#dtpReportedDate').on('dp.change', function (e) {
            var today = new Date();
            if (e.date._d > today) {
                $('#dtpReportedDate').data("DateTimePicker").date(new Date())
                bootbox.alert({
                    message: "Reported Date cannot be a future date",
                    size: 'small'
                });
            }
        });

        $('#dtpIncidentDate').on('dp.change', function (e) {
            var today = new Date();
            if (e.date._d > today) {
                $('#dtpIncidentDate').data("DateTimePicker").date(new Date())
                bootbox.alert({
                    message: "Incident Date cannot be a future date",
                    size: 'small'
                });
            }
        });

        $("#Broker_Account").change(function () {
            if ($("#Broker_Account").val() == "") {
                $("#Broker_Account_Id").val("");
                $("#Broker_Name").val("");
                $("#Broker_Name_Id").val("");
            }
        });

        $("#btnSubmit").click(function (e) {

            if ($("#Claim_Type").val() == "Notification" && $("#Notification_Status").val() == '') {
                $("#Notification_Status").addClass("input-validation-error");
                e.preventDefault();
            }
            else {
                $("#Notification_Status").removeClass("input-validation-error");
            }

            if ($("#Claim_Type").val() == "Claim" && $("#Policy_No").val() == '') {

                $("#Policy_No").addClass("input-validation-error");
                e.preventDefault();
            }
            else {
                $("#Policy_No").removeClass("input-validation-error");
            }

        });

    });

    function Cancel() {

        $(window).off('beforeunload');
        window.location.href = '/claimlist/Index';
    }
</script>