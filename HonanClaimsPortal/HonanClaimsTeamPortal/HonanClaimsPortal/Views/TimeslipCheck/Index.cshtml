@model HonanClaimsWebApi.Models.TimeslipCheck.TimeslipReturnModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- MOMENT JS-->
<script src="~/Content/vendor/moment/min/moment-with-locales.min.js"></script>
<!-- DATETIMEPICKER-->
<link href="~/Content/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<script src="~/Content/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>




<div class="content-wrapper">
    <h3>
        Check Billable Time
    </h3>
    <div class="row">
        <div class="col-md-12">
            <fieldset class="mb-0">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-sm-3 control-label input-sm">Claim Team</label>
                            <div class="col-sm-9">
                                @Html.DropDownListFor(m => m.ClaimTeam,
                            new SelectList(Model.ClaimTeam, "Code", "Text"),
                            "--Select--",
                            new { @class = "form-control input-sm", @onchange = "comboChange()" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb">
                        <div class="form-group">
                            <label class="col-sm-3 control-label input-sm">Service by</label>
                            <div class="col-sm-9">
                                @Html.DropDownListFor(m => m.ServiceBy,
                            new SelectList(Model.ServiceBy, "Code", "Text"),
                            "--Select--",
                            new { @class = "form-control input-sm", @onchange = "comboChange()" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-sm-3 control-label input-sm">Claim</label>
                            <div class="col-sm-9">
                                @Html.DropDownListFor(m => m.Claim,
                            new SelectList(Model.Claim, "Code", "Text"),
                            "--Select--",
                            new { @class = "form-control input-sm", @onchange = "comboChange()" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-sm-3 control-label input-sm">Account</label>
                            <div class="col-sm-9">
                                @Html.DropDownListFor(m => m.Account,
                            new SelectList(Model.Account, "Code", "Text"),
                            "--Select--",
                            new { @class = "form-control input-sm", @onchange = "comboChange()" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb">
                        <div class="form-group">
                            <label class="col-sm-3 control-label input-sm">Date from</label>
                            <div class="col-sm-9">
                                <div id="datetimepicker1" class="input-group date">
                                    @Html.TextBoxFor(o => o.Datefrom, new { @class = "form-control input-sm" })
                                    <span class="input-group-addon" id="basic-addon2"><i class="fa fa-calendar" aria-hidden="true"></i></span>
                                    <span style="color:red;" id="errorDate"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb">
                        <div class="form-group">
                            <label class="col-sm-3 control-label input-sm">Date to</label>
                            <div class="col-sm-9">
                                <div id="datetimepicker2" class="input-group date">
                                    @Html.TextBoxFor(o => o.Dateto, new { @class = "form-control input-sm", @style = "z-index: auto" })
                                    <span class="input-group-addon" id="basic-addon2"><i class="fa fa-calendar" aria-hidden="true"></i></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="col-md-12 ">
                            <div class="pull-right">
                                <button id="clearFilter" type="button" class="btn btn-default mr-20">Clear Filter</button>
                                <button id="filterList" type="button" class="btn btn-primary">Filter Billable</button>
                            </div>
                        </div>
                    </div>
                </div>

            </fieldset>
        </div>

        <div class="col-md-12">
            <fieldset>
                <div class="col-md-8">
                    <div id="grid1"></div>
                </div>
                <div class="col-md-4">
                    <div class="row mb">
                        <div class="col-md-12">
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Service By</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.Service_By_Name, new { @class = "form-control input-sm", disabled = "disabled" })
                                        @Html.HiddenFor(m => m.InnerModeL.H_Billingsid)
                                        @Html.HiddenFor(m => m.InnerModeL.H_Claimsid)
                                    </div>
                                </div>
                            </div>
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Claim</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.Claim_No, new { @class = "form-control input-sm", disabled = "disabled" })
                                    </div>
                                </div>
                            </div>
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Is Billable</label>
                                    <div class="col-sm-9">
                                        @Html.CheckBoxFor(m => m.InnerModeL.Is_Billable, new { @class = "input-sm" })
                                    </div>
                                </div>
                            </div>
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Rate P/Hr</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.Rate, new { @class = "form-control input-sm", disabled = "disabled" })
                                    </div>
                                </div>
                            </div>
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Service Date</label>
                                    <div class="col-sm-9">
                                        <div id="datetimepicker3" class="input-group date">
                                            @Html.TextBoxFor(o => o.InnerModeL.Service_Date, new { @class = "form-control input-sm" })
                                            <span class="input-group-addon" id="basic-addon2"><i class="fa fa-calendar" aria-hidden="true"></i></span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Start Time</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.sStart_Time, new { @style = "width:100%" })
                                        @Html.ValidationMessageFor(o => o.InnerModeL.sStart_Time, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })
                                    </div>
                                </div>
                            </div>
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">End Time</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.sEnd_Time, new { @style = "width:100%" })
                                        @Html.ValidationMessageFor(o => o.InnerModeL.sEnd_Time, String.Empty, new { @class = "parsley-errors-list filled", @style = "color:red" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Qty(Mins)</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.Qty_Mins, new { @class = "form-control input-sm", disabled = "disabled" })
                                    </div>
                                </div>
                            </div>
                            <div class="row mb">
                                <div class="form-group">
                                    <label class="col-sm-3 control-label input-sm">Billable</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.InnerModeL.Billable, new { @class = "form-control input-sm", disabled = "disabled" })
                                    </div>
                                </div>
                            </div>

                            <div class="row mb">
                                <div class="form-group">
                                    @Html.TextAreaFor(m => m.InnerModeL.Work_Done, new { @class = "form-control input-sm resize-block billable-txtarea" })
                                </div>
                            </div>
                            <div class="pull-right">
                                <button id="Markaschecked" type="button" class="btn btn-default">Mark as Checked</button>
                                <button id="nonbillable" type="button" class="btn btn-default">Mark as Non Billable</button>
                                <button id="skipnext" type="button" class="btn btn-default">Skip Next One</button>
                            </div>
                        </div>

                    </div>
                </div>
            </fieldset>
        </div>
    </div>
</div>
@Html.HiddenFor(m => m.InnerModeL.Rate_Per_Unit)
@Html.HiddenFor(m => m.InnerModeL.Units)
<script>
    //--------------Start Time-----------------------------
    $(document).ready(function () {
        $("#InnerModeL_sStart_Time").kendoTimePicker({
            interval: 1,
            change: onStartChange,
            Format: ("hh:mm tt"),
            open: OnStartOpen,
        });
    });

    var preStartOpenTime = null;
    function OnStartOpen(e) {
        preStartOpenTime = e.sender._oldText;
    }

    function onStartChange(e) {
        var sDate = new Date(e.sender.value());

        var datetimepicker = $("#InnerModeL_sEnd_Time").data("kendoTimePicker");
        var eDate = new Date(datetimepicker._value);

        if (sDate > eDate) {
            bootbox.alert("Start time cannot be later than end time");
            var Starttimepicker = $("#InnerModeL_sStart_Time").data("kendoTimePicker");
            Starttimepicker.value(preStartOpenTime);
        } else {
            var SH = sDate.getHours();
            var SM = sDate.getMinutes();

            var EH = eDate.getHours();
            var EM = eDate.getMinutes();

            var totalMi = ((EH * 60) + EM) - ((SH * 60) + SM);
            if (totalMi < 0) {
                e.preventDefault;
                return false;
            }
            var mode = totalMi % 6;
            var Unit = 0;
            if (mode <= 2) {
                Unit = Math.floor(totalMi / 6);
            } else {
                Unit = Math.ceil(totalMi / 6);
            }
            $("#InnerModeL_Units").val(Unit);
            var RatePUNIT = $("#InnerModeL_Rate_Per_Unit").val();
            var val = (RatePUNIT * Unit).toFixed(2);
            $("#InnerModeL_Billable").val(val);
        }
    }

    //------------------------EndTime-------------------------
    $(document).ready(function () {
        $("#InnerModeL_sEnd_Time").kendoTimePicker({
            interval: 1,
            change: onEndChange,
            Format: ("hh:mm tt"),
            open: OnEndOpen,
        });
    });

    var preEndOpenTime = null;
    function OnEndOpen(e) {
        preEndOpenTime = e.sender._oldText;
    }

    function onEndChange(e) {
        var datetimepicker = $("#InnerModeL_sStart_Time").data("kendoTimePicker");
        var sDate = new Date(datetimepicker._value);
        var eDate = new Date(e.sender.value());

        if (sDate > eDate) {
            bootbox.alert("End time cannot be earlier than start time");
            var Endtimepicker = $("#InnerModeL_sEnd_Time").data("kendoTimePicker");
            Endtimepicker.value(preEndOpenTime);

        } else {
            var SH = sDate.getHours();
            var SM = sDate.getMinutes();

            var EH = eDate.getHours();
            var EM = eDate.getMinutes();

            var totalMi = ((EH * 60) + EM) - ((SH * 60) + SM);
            if (totalMi < 0) {
                return false;
            }
            var mode = totalMi % 6;
            var Unit = 0;
            if (mode <= 2) {
                Unit = Math.floor(totalMi / 6);
            } else {
                Unit = Math.ceil(totalMi / 6);
            }
            $("#InnerModeL_Units").val(Unit);
            var RatePUNIT = $("#InnerModeL_Rate_Per_Unit").val();
            var val = (RatePUNIT * Unit).toFixed(2);
            $("#InnerModeL_Billable").val(val);
        }
    }
    $(document).ready(function () {

        $("#InnerModeL_Is_Billable").attr('value', 'true');

        $("#InnerModeL_Is_Billable").on('change', function () {
            if ($(this).is(':checked')) {
                $(this).attr('value', 'true');
            } else {
                $(this).attr('value', 'false');
            }

        });

        $('#datetimepicker1').datetimepicker({
            format: 'DD/MM/YYYY'
        });

        $('#datetimepicker2').datetimepicker({
            format: 'DD/MM/YYYY'
        });

        $('#datetimepicker3').datetimepicker({
            format: 'DD/MM/YYYY'
        });

        $("#datetimepicker1").on("dp.change", function (e) {
            var tdate = $("#datetimepicker1").data().date;
            $("#Datefrom").val(tdate);
        });

        $("#datetimepicker3").on("dp.change", function (e) {
            var tdate = $("#datetimepicker3").data().date;
            $("#Service_Date").val(tdate);
        });


        $("#datetimepicker2").on("dp.change", function (e) {
            var tdate = $("#datetimepicker2").data().date;
            var tdate1 = $("#datetimepicker1").data().date;
            $("#Dateto").val(tdate);
            if (tdate < tdate1) {
                $("#errorDate").text("From date must be less than To date");
            } else {
                $("#errorDate").text("");
                LoadGridDetail();
            }
        });

        LoadGridDetail();

        $('#clearFilter').click(function () {
            $('#ClaimTeam').val("");
            $('#ServiceBy').val("")
            $('#Claim').val("");
            $('#Datefrom').val("");
            $('#Dateto').val("");
            LoadGridDetail();
        });

        $('#filterList').click(function () {
            LoadGridDetail();
        })
    })

    function LoadGridDetail() {
        var claimTeam = null;
        var accountId = null;
        var serviceBy = null;
        var claimId = null;
        var fromDate = null;
        var toDate = null;

        //Get value list
        var c = $('#ClaimTeam').val();
        if (c != null && c != "") { claimTeam = c }
        var o = $('#Account').val();
        if (o != null && o != "") { accountId = o }
        var cl = $('#ServiceBy').val();
        if (cl != null && cl != "") { serviceBy = cl }
        var s = $('#Claim').val();
        if (s != null && s != "") { claimId = s }
        var a = $('#Datefrom').val();
        if (a != null && a != "") { fromDate = a }
        var t = $('#Dateto').val();
        if (t != null && a != "") { toDate = t }
        //load grid list
        $("#grid1").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: "/TimeslipCheck/GetMyTimeslipCheck?claimTeam=" + claimTeam + "&accountId=" + accountId + "&serviceBy=" + serviceBy + "&claimId=" + claimId + "&fromDate=" + fromDate + "&toDate=" + toDate
                },
                pageSize: 10
            },
            height: 600,
            sortable: true,
            selectable: "multiple",
            change: onChange,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
                {
                    hidden: true,
                    field: "BillingId",
                    title: "BillingId"
                },
                {
                    field: "ClaimRefNo",
                    title: "Claims Ref ",
                },
                {
                    field: "ServiceBy",
                    title: "Service By",
                },
                {
                    title: "Service Date",
                    template: "#if(ServiceDate === null){# '' #}else{# #= kendo.toString(kendo.parseDate(ServiceDate), 'dd-MM-yyyy') #  #}#"
                },
                {
                    field: "StartTime",
                    title: "Start Time",
                },
                {
                    field: "Customer",
                    title: "Customer",
                },
                {
                    field: "Billable",
                    title: "Billable $$",
                }],
            dataBound: function () {
                $(".checkbox").bind("change", function (e) {
                    $(e.target).closest("tr").toggleClass("k-state-selected");
                });
            }
        });

        function onChange(arg) {
            $('tr').find('[type=checkbox]').prop('checked', false);
            $('tr.k-state-selected').find('[type=checkbox]').prop('checked', true);
            var dataItem = this.dataItem(this.select());
            setTextFields(dataItem);
        }
    }

    function comboChange() {
        LoadGridDetail();
    }

    function setTextFields(dataItem) {
        $.get("/TimeslipCheck/GetBillingRecords?billingId=" + dataItem.BillingId, function (data) {
            $('#InnerModeL_H_Billingsid').val(data.H_Billingsid);
            $('#InnerModeL_Service_By_Name').val(data.Service_By_Name);
            $('#InnerModeL_Is_Billable').val(data.Is_Billable);
            $('#InnerModeL_H_Claimsid').val(data.H_Claimsid_Billing);
            if (data.Is_Billable) { $('#InnerModeL_Is_Billable').prop("checked", true); } else { $('#InnerModeL_Is_Billable').prop("checked", false); }
            $('#InnerModeL_Rate').val(data.Rate);
            $('#InnerModeL_Claim_No').val(data.Claim_No);

            debugger;
            if (data.Service_Date != null && data.Service_Date != "") {
                var date = new Date(data.Service_Date);
                var month = date.getMonth() + 1;
                data.Service_Date = date.getDate() + "/" + month + "/" + date.getFullYear();
                $("#InnerModeL_Service_Date").val(data.Service_Date);
            }

            if (data.End_Time != null) {
                var End_Time = new Date(parseInt(data.End_Time.substr(6)));
                var year = End_Time.getFullYear();
                if (year == 1) {
                    data.sEnd_Time = "";
                } else {
                    var h = End_Time.getHours(), m = End_Time.getMinutes();
                    if (h == 0) { h = 12 };
                    var _time = (h > 12) ? (h - 12 + ':' + ("0000" + m).slice(-2) + ' PM') : (h + ':' + ("0000" + m).slice(-2) + ' AM');
                    data.sEnd_Time = _time;
                }
            }


            if (data.Start_Time != null) {
                var Start_Time = new Date(parseInt(data.Start_Time.substr(6)));
                var yesr = Start_Time.getFullYear();
                if (year == 1) {
                    data.sStart_Time = "";
                } else {
                    var h = Start_Time.getHours(), m = Start_Time.getMinutes();
                    if (h == 0) { h = 12 };
                    var _time = (h > 12) ? (h - 12 + ':' + ("0000" + m).slice(-2) + ' PM') : (h + ':' + ("0000" + m).slice(-2) + ' AM');
                    data.sStart_Time = _time;
                }
            }
            $("#InnerModeL_sStart_Time").val(data.sStart_Time);
            $("#InnerModeL_sEnd_Time").val(data.sEnd_Time);


            var Endtimepicker = $("#InnerModeL_sEnd_Time").data("kendoTimePicker");
            Endtimepicker.value(data.sEnd_Time);


            var Starttimepicker = $("#InnerModeL_sStart_Time").data("kendoTimePicker");
            Starttimepicker.value(data.sStart_Time);


            $('#InnerModeL_Qty_Mins').val(data.Qty_Mins);
            $('#InnerModeL_Billable').val(data.Billable);
            $('#InnerModeL_Rate_Per_Unit').val(data.Rate_Per_Unit);
        });
    }

    function clearTextFileds() {
        $('#InnerModeL_H_Billingsid').val('');
        $('#InnerModeL_Service_By_Name').val('');
        $('#InnerModeL_Is_Billable').val('');
        $('#InnerModeL_H_Claimsid').val('');
        $('#InnerModeL_Is_Billable').prop("checked", false);
        $('#InnerModeL_Rate').val('');
        $('#InnerModeL_Claim_No').val('');
        $("#InnerModeL_Service_Date").val('');
        $('#InnerModeL_Start_Time_HH').val('');
        $('#InnerModeL_Start_Time_MM').val('');
        $('#InnerModeL_End_Time_HH').val('');
        $('#InnerModeL_End_Time_MM').val('');
        $('#InnerModeL_Qty_Mins').val('');
        $('#InnerModeL_Billable').val('');
        $('#InnerModeL_Rate_Per_Unit').val('');
    }

    $('#Markaschecked').click(function () {
        var id = $('#InnerModeL_H_Billingsid').val();
        var claimId = $('#InnerModeL_H_Claimsid').val();
        var serviceDate = $('#InnerModeL_Service_Date').val();

        var sStart_Time = $('#InnerModeL_sStart_Time').val();
        var sEnd_Time = $('#InnerModeL_sEnd_Time').val();


        var ids = "";
        var count = 0;
        var grid = $("#grid1").data("kendoGrid");
        grid.select().each(function () {
            var dataItem = grid.dataItem($(this));
            ids = dataItem.BillingId + "," + ids;
            count = count + 1;
        });
        if (count == 1) {
            debugger;
            if (id != null && id != "" && claimId != null && claimId != "" && (sStart_Time != null && sStart_Time != "") && (sEnd_Time != "" && sEnd_Time != null)) {
                $.get("/TimeslipCheck/MarkAsChecked?billingId=" + id + "&serviceDate=" + serviceDate + "&sStart_Time=" + sStart_Time + "&sEnd_Time=" + sEnd_Time + "&claimId=" + claimId, function (data) {
                    if (data == false) {
                        bootbox.alert("Error in Updating mark as checked");
                    } else {
                        $("#grid1").data("kendoGrid").dataSource.read();
                        bootbox.alert("mark as checked");
                        clearTextFileds();
                    }
                });
            }
            else {
                bootbox.alert("Please fill all the data ");
            }
        }
        else {
            $.get("/TimeslipCheck/MarkAsCheckedPost?billingIds=" + ids, function (data) {
                if (data == false) {
                    bootbox.alert("Error in Updating mark as checked");
                } else {
                    $("#grid1").data("kendoGrid").dataSource.read();
                    bootbox.alert("Mark as checked");
                }
            });
        }

        // }
    })


    $('#nonbillable').click(function () {

        $("#InnerModeL_Is_Billable").attr('checked', false);
        var id = $('#InnerModeL_H_Billingsid').val();
        var claimId = $('#InnerModeL_H_Claimsid').val();
        var serviceDate = $('#InnerModeL_Service_Date').val();

        var sStart_Time = $('#InnerModeL_sStart_Time').val();
        var sEnd_Time = $('#InnerModeL_sEnd_Time').val();

        var ids = "";
        var count = 0;
        var grid = $("#grid1").data("kendoGrid");
        grid.select().each(function () {
            var dataItem = grid.dataItem($(this));
            ids = dataItem.BillingId + "," + ids;
            count = count + 1;
        });

        if (count == 1) {
            bootbox.confirm("Do you want to mark as Non Billable", function (result) {
                if (result) {
                    if (id != null && id != "" && claimId != null && claimId != "" && (sStart_Time != null && sStart_Time != "") && (sEnd_Time != "" && sEnd_Time != null)) {
                        $.get("/TimeslipCheck/MarkAsNonBillable?billingId=" + id + "&serviceDate=" + serviceDate + "&sStart_Time=" + sStart_Time + "&sEnd_Time=" + sEnd_Time + "&claimId=" + claimId, function (data) {
                            if (data == false) {
                                bootbox.alert("Error in Updating mark as checked");
                            } else {
                                $("#grid1").data("kendoGrid").dataSource.read();
                                bootbox.alert("Mark as Non Billable");
                                clearTextFileds();
                            }
                        });
                    }
                }
            });
        }
        else {

            bootbox.confirm("Do you want to mark as Non Billable", function (result) {
                if (result) {
                    $.get("/TimeslipCheck/MarkAsNonBillablePost?billingIds=" + ids, function (data) {
                        if (data == false) {
                            bootbox.alert("Error in Updating Non billable");
                        } else {
                            $("#grid1").data("kendoGrid").dataSource.read();
                            bootbox.alert("Mark as Non Billable");
                        }
                    });
                }
            });
        }
    });

    $('#skipnext').click(function () {

        //clearTextFileds();
        var Hid = $('#InnerModeL_H_Billingsid').val();
        if (Hid != null && Hid != "") {
            var grid = $("#grid1").data("kendoGrid");
            var selectedRow = grid.select();
            var index = selectedRow.index();

            if (index != -1) {
                var data = $("#grid1").data("kendoGrid").dataSource.view();
                var newind = index + 1;

                $(selectedRow).removeClass("k-state-selected");

                if (data.length >= newind) {
                    var id = data[newind].uid;
                    grid.select("tr:eq(" + newind + ")")
                    setTextFields(data[newind]);
                    debugger;
                }
            }
        }
    })
</script>
