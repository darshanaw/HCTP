
@model HonanClaimsWebApi.Models.Claim.Payment



<script>
    $(function () {

        $('.dateCalendar').datetimepicker({
            format: 'DD/MM/YYYY'
        });

        $('.dateCalendar_Date_Invoice').datetimepicker({
            format: 'DD/MM/YYYY',
            //locale: 'pt-br',
            maxDate: moment()
        });

        $('.dateCalendarDate_Sent_For_Payment').datetimepicker({
            format: 'DD/MM/YYYY',
            //locale: 'pt-br',
            maxDate: moment(),
            widgetPositioning: {
                //horizontal: 'top',
                vertical: 'top'
            }
        });

        $('.dateCalendarDate_Invoice_Paid').datetimepicker({
            format: 'DD/MM/YYYY',
            //locale: 'pt-br',
            maxDate: moment()
        });


        $('.dateCalendarDate_Payment_Date').datetimepicker({
            format: 'DD/MM/YYYY',
            maxDate: moment()
        });


        $('.dateCalendarDate_Payment_Date').on('dp.change', function (e) {
            if ($('#Is_Settlement').is(':checked')) {
                $('.dateCalendar_Date_Invoice').data("DateTimePicker").date(e.date);
            }
        });


        $("#Payee_Type").select2({
            tags: true,
            theme: "bootstrap",
        });

        //$("#Payee_Type option[value='xxxxx']").prop("selected", true);


    });

    function GetResult_Pd(data) {

        if ($('#PaymentDetailModal').length > 0) {

            if (typeof CalculatePaymentFigures !== 'undefined' && $.isFunction(CalculatePaymentFigures)) {

                CalculatePaymentFigures();
            }

            $('#PaymentDetailModal').modal('hide');
        }

        $.LoadingOverlay("hide");
        RefreshPaymentDetailsGrid();
    }

    function clearPaymentFiles() {
        $(".k-upload-files > li").remove();
    }

    function setSelect2TagsValue(values_payeeType_) {

        var rePayee = /[0-9]+$/;
        var values_payeeType = values_payeeType_; //pull ItemIds from Model in MVC

        $.each(values_payeeType.split(","), function (i, e) {
            if (e != "Not Set" && e != "" && e != null && e != undefined) {
                if (i == 0)
                    e = " " + e;
                if (!rePayee.test(e)) {
                    var newList = $.merge($('#Payee_Type').select2('data'), [{
                        id: e,
                        tag: e
                    }]);
                    $("#Payee_Type").select2('data', newList);
                    $("#Payee_Type").append('<option value="' + e + '">' + e + '</option>');
                }
                else {
                    $("#Payee_Type").append($("#Payee_Type option[value='" + e + "']"));
                }
                $("#Payee_Type option[value='" + e + "']").prop("selected", true);
            }
        });
    }


</script>

<style>
    .k-upload.k-header {
        width: 100%;
    }

    .k-upload-status.k-upload-status-total {
        display: none;
    }

</style>



@using (Ajax.BeginForm("_PaymentDetail", "ClaimDetailTabs", new AjaxOptions { HttpMethod = "POST", OnSuccess = "GetResult_Pd", UpdateTargetId = "divFakePayment" }, new { @id = "frmPaymentDetail", enctype = "multipart/form-data" }))
{

    @Html.HiddenFor(o => o.Payee_Account)
    @Html.HiddenFor(o => o.Payee_Contact)
    @Html.HiddenFor(o => o.Payment_To)
    @Html.HiddenFor(o => o.Sent_To_Contact)
    @Html.HiddenFor(o => o.Invoice_Attached)
    @Html.HiddenFor(o => o.H_Claimsid)
    @Html.HiddenFor(o => o.IsNew)
    @Html.HiddenFor(o => o.H_Paymentsid)

    <div style="display:none" id="divFakePayment"></div>

    <div class="col-md-6">

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Claim Ref</label>
                <div class="col-sm-8">
                    @if (string.IsNullOrEmpty(Model.ClaimRefNo_Payment))
                {
                        @Html.DropDownListFor(model => model.ClaimRefNo_Payment, new SelectList(Model.ClaimRefNo_Payment_List, "Text", "Text"), "",
                   new { @class = "form-control input-sm" })
                    }
                    else
                    {
                        @Html.TextBoxFor(o => o.ClaimRefNo_Payment, new { @class = "form-control input-sm disabledControl", @readonly = true })
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Reserve Type</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(model => model.Reserve_Type, new SelectList(Model.Reserve_Type_List, "Text", "Text"), "",
                   new { @class = "form-control input-sm" })
                    @Html.HiddenFor(x => x.Reserve_Type, new { @class = "Reserve_Type_Class" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Date Received</label>
                <div class="col-sm-8">
                    <div class="input-group date dateCalendar_Date_Invoice" style="width:100%">
                        @Html.TextBoxFor(o => o.Date_Invoice_Received, new { @class = "form-control input-sm" })
                        <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Invoice Ref.</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Invoice_Reference, new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                @*<label class="col-sm-4 control-label input-sm">Invoice Attach</label>*@
                <div class="col-sm-12 mb">
                    <input type="file" name="files" id="uploadInvoiceAttach" />
                    <a href='#' id="paymentDetailAttachmentName" class="pull-right"></a>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payee Type</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(model => model.Payee_Type, new SelectList(Model.Payee_Type_List, "Text", "Text"), "",
                   new { @class = "form-control input-sm", @style = "width:100%" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payee Acct</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Payee_Account_Name, new { @class = "form-control input-sm", @maxlength = 100 })
                        <span id="AccountNoModal_TSD" class="input-group-btn" data-toggle="modal" data-target="#AccountBrokerModal_Pd">
                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                <i class="fa fa-binoculars"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payee Contact</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Payee_Contact_Name, new { @class = "form-control input-sm", @maxlength = 100 })
                        <span id="ContactModal_Pd" class="input-group-btn" data-toggle="modal" data-target="#ContactBrokerModal_Pd">
                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                <i class="fa fa-binoculars"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Total Gross</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Total_Gross, new { @class = "form-control input-sm", @type = "number" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm"></label>
                <div class="col-sm-8">
                    GST Inc >>  @Html.CheckBoxFor(o => o.Gst_Included)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">GST (%)</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Gst, new { @class = "form-control input-sm", @type = "number" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Total Net</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Total_Net, "{0:n2}", new { @class = "form-control input-sm", @type = "number" })
                </div>
            </div>
        </div>


        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Date Sent for Payment</label>
                <div class="col-sm-8">
                    <div class="input-group date dateCalendarDate_Sent_For_Payment" style="width:100%">
                        @Html.TextBoxFor(o => o.Date_Sent_For_Payment, new { @class = "form-control input-sm" })
                        <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-6">

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payment To</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Payment_To_Name, new { @class = "form-control input-sm", @maxlength = 100 })
                        <span id="Payment_To_Name_Pd" class="input-group-btn" data-toggle="modal" data-target="#Payment_To_Name_Modal_Pd">
                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                <i class="fa fa-binoculars"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Send To Contact</label>
                <div class="col-sm-8">
                    <div class="input-group">
                        @Html.TextBoxFor(o => o.Sent_To_Contact_Name, new { @class = "form-control input-sm", @maxlength = 100 })
                        <span id="Sent_To_Contact_Name_Pd" class="input-group-btn" data-toggle="modal" data-target="#Sent_To_Contact_Name_Modal_Pd">
                            <button type="button" class="mb-sm btn btn-info btn-sm btn-outline" style="padding-bottom: 3.5px">
                                <i class="fa fa-binoculars"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Phone #</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Phone, new { @class = "form-control input-sm", @maxlength = 100, @id = "payment_phone" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Email</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Email, new { @class = "form-control input-sm", @maxlength = 100, @id = "payment_email" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payment Status</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(model => model.Payment_Status, new SelectList(Model.Payment_Status_List, "Text", "Text"), "",
                   new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Date Invoice Paid</label>
                <div class="col-sm-8">
                    <div class="input-group date dateCalendarDate_Invoice_Paid" style="width:100%">
                        @Html.TextBoxFor(o => o.Date_Invoice_Paid, new { @class = "form-control input-sm" })
                        <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payment Type</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(model => model.Payment_Type, new SelectList(Model.Payment_Type_List, "Text", "Text"), "",
                   new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payment Method</label>
                <div class="col-sm-8">
                    @Html.DropDownListFor(model => model.Payment_Method, new SelectList(Model.Payment_Method_List, "Text", "Text"), "",
                   new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Settlement Payment</label>
                <div class="col-sm-8">
                    @Html.CheckBoxFor(o => o.Is_Settlement)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Amount</label>
                <div class="col-sm-8">
                    @Html.TextBoxFor(o => o.Payment_Amount, new { @class = "form-control input-sm", @type = "number" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Payment Date</label>
                <div class="col-sm-8">
                    <div class="input-group date dateCalendarDate_Payment_Date" style="width:100%">
                        @Html.TextBoxFor(o => o.Payment_Date, new { @class = "form-control input-sm" })
                        <span class="input-group-addon btn btn-info btn-sm btn-outline datebtn" style="padding-bottom: 3.5px;">
                            <span class="fa fa-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb">
                <label class="col-sm-4 control-label input-sm">Notes</label>
                <div class="col-sm-8">
                    @Html.TextAreaFor(o => o.Payment_Note, new { @class = "form-control input-sm" })
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-12">
        <div class="footer text-right">
            @*<input type="button" class="mb-sm btn btn-info" id="btnSendPaymentEmail" value="Send Email"/>*@
            <a class="mb-sm btn btn-info" id="btnSendPaymentEmail">Send Email</a>
            <button type="button" class="mb-sm btn btn-default" data-dismiss="modal">Discard Changes</button>
            <button type="submit" class="mb-sm btn btn-primary" id="btnSavePaymentDetail" onclick="return CheckPaymentData();">Save Changes</button>
        </div>
    </div>

}

<!-- Modal -->
<div id="AccountBrokerModal_Pd" class="modal fade AccountBrokerModal_Pd" role="dialog" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close AccountBrokerModal_Pd_Close">&times;</button>
                <h4 class="modal-title">Account Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_PaymentAccountLookUp.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default AccountBrokerModal_Pd_Close" id="AccountBrokerModal_Pd_Close">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="ContactBrokerModal_Pd" class="modal fade ContactBrokerModal_Pd" role="dialog" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close ContactBrokerModal_Close_Pd">&times;</button>
                <h4 class="modal-title">Contact Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_PaymentContactLookUp.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default ContactBrokerModal_Close_Pd" id="ContactBrokerModal_Close_Pd">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="Payment_To_Name_Modal_Pd" class="modal fade Payment_To_Name_Modal_Pd" role="dialog" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close Payment_To_Name_Pd_Close">&times;</button>
                <h4 class="modal-title">Payment To Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_PaymentTo.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default Payment_To_Name_Pd_Close" id="Payment_To_Name_Pd_Close">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="Sent_To_Contact_Name_Modal_Pd" class="modal fade Sent_To_Contact_Name_Modal_Pd" role="dialog" data-backdrop="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close Sent_To_Contact_Name_Close_Pd">&times;</button>
                <h4 class="modal-title">Send To Contact Lookup</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_SendToContact.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default Sent_To_Contact_Name_Close_Pd" id="Sent_To_Contact_Name_Close_Pd">Close</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div id="UpdateLiabilityReserveModal" class="modal fade UpdateLiabilityReserveModal" role="dialog" data-backdrop="false" style="padding-top: 10%;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close UpdateLiabilityReserveModal_Close">&times;</button>
                <h4 class="modal-title">Update Liability Reserve</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("~/Views/Shared/_UpdateLiabilityReserve.cshtml", null) @*, new ViewDataDictionary { { "Policy_No", Model.Policy_No } }*@
            </div>
            @*<div class="modal-footer">
                    <button type="button" class="btn btn-default UpdateLiabilityReserveModal_Close" id="UpdateLiabilityReserveModal_Close">Close</button>
                </div>*@
        </div>
    </div>
</div>


<div id="sendPaymentEmailModal" class="modal fade" role="dialog" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-md">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button id="closemodPayment" type="button" class="close">&times;</button>
                <h4 class="modal-title">Send Email</h4>
                <div class="col-md-12">
                    <button id="sendPaymentEmail" class="btn btn-primary pull-right">Send</button>
                </div>
            </div>

            <div class="modal-body">

                <div class="top-padding col-md-12">
                    <label class="col-sm-1 control-label input-sm">To:</label>
                    <div class="col-sm-11">
                        <input class="form-control input-sm" id="emailToPayment" />
                    </div>
                </div>

                @*<div class="top-padding col-md-12">
                    <label class="col-sm-1 control-label input-sm">CC:</label>
                    <div class="col-sm-11">
                        <input class="form-control input-sm" id="CClistPayment" />
                    </div>
                </div>*@

                <div class="top-padding col-md-12">
                    <label class="col-sm-1 control-label input-sm">Subject:</label>
                    <div class="col-sm-11">
                        <input class="form-control input-sm" id="subjectPayment" />
                    </div>
                </div>

                <div class="top-padding col-md-12">
                    <label class="checkbox c-checkbox pull-right mt0 input-sm" style="font-weight:500">
                        <input type="checkbox" value="false" id="chkIncludeInvoice">
                        <span class="fa fa-check"></span> Include invoice as attachment
                    </label>
                </div>
                <div class="top-padding col-md-12">
                    <div id="EmailEditPayment">
                        <textarea id="editorPayment"  class="small-editor" name="editorPayment" rows="10" cols="30" aria-label="editor"></textarea>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>


<script>

    function CheckPaymentData()
    {
        if ($("#Liability_Reserve").length > 0) {

            var val1 = $("#Liability_Reserve").val();
            var val2 = $("#Payment_Amount").val();

            if ($("#Payment_Amount").length > 0) {
                $("#txtSettlementAmount_pymt").val($("#Payment_Amount").val());
            }

            if ($("#txtLiability_pymt").length > 0) {
                $("#txtLiability_pymt").val($("#Liability_Reserve").val());
            }

            if ($("#txtLiabilityResSource_pymt").length > 0) {
                $("#txtLiabilityResSource_pymt").val($("#Liability_Res_Source").val());
            }

            if ($("#txtMinimumReserveAmount").length > 0) {
                var value = Number($("#txtSettlementAmount_pymt").val()) - Number($("#Liability_Reserve").val()) + Number($("#Liability_Res_Source").val());
                $("#txtMinimumReserveAmount").val(value );
            }

            //if (val1 == '' || val1 == null || typeof val1 == 'undefined' || val1 == 'NaN')
            //    val1 = "0";

            //if (val2 == '' || val2 == null || typeof val2 == 'undefined' || val2 == 'NaN')
            //    val2 = "0";

            if (val1 !== '' && val2 !== '') {

                if (Number(val1) < Number(val2)) {

                    $("#UpdateLiabilityReserveModal").modal("show");
                    //bootbox.alert("The settlement amount cannot be greater than the balance of the liability reserve. Please increase the Liability reserve prior to saving.");
                    return false;
                }
            }
        }
    }

    $(function () {


        $("#btnUpdateLiabilityFromPayment").click(function () {
            //$("#Liability_Reserve_Id").val($("#txtLiabilityResSource_pymt").val());

            $("#Liability_Res_Source").val($("#txtLiabilityResSource_pymt").val());

            if ($("#txtLiabilityResSource").length > 0) {
                $("#txtLiabilityResSource").val($("#txtLiabilityResSource_pymt").val())
            }

            CalculatePaymentFigures();
            $("#UpdateLiabilityReserveModal").modal("hide");

        });


        $(".UpdateLiabilityReserveModal_Close").click(function () {

            $("#UpdateLiabilityReserveModal").modal("hide");
        });

        $('#frmPaymentDetail').submit(function (e) {

            dynamicValidations_Payment();

            if ($(this).valid()) {
                $.LoadingOverlay("show");
            }
        });

        $("#uploadInvoiceAttach").kendoUpload({

            multiple: false,
            async: {
                saveUrl: '@Url.Action("UploadPaymentFile", "ClaimDetailTabs")',
                autoUpload: true
            }
        });

        $("#uploadInvoiceAttach").closest(".k-upload-button")
            .find("span")
            .text("Attach Invoice");


        $(".AccountBrokerModal_Pd_Close").click(function () {
            $("#AccountBrokerModal_Pd").modal("hide");
        });

        $(".ContactBrokerModal_Close_Pd").click(function () {
            $("#ContactBrokerModal_Pd").modal("hide");
        });

        //$("#AccountNoModal_Pd").click(function () {
        //    $('#tbPaymentAccount').DataTable().ajax.reload(null, false);
        //});

        $("#ContactModal_Pd").click(function () {
            $('#tbContact_Pd').DataTable().ajax.reload(null, false);
        });

        $("#Gst_Included").change(function () {

            claculateGst();

            if ($("#Gst_Included").is(":checked")) {
                $("#Gst_Included").val(true);
            }
            else
                $("#Gst_Included").val(false);

        });

        $("#Total_Gross").change(function () {
            claculateGst();
        });

        $('#Gst').on('input', function () {
            claculateGst();
        });

        $(".Payment_To_Name_Pd_Close").click(function () {
            $("#Payment_To_Name_Modal_Pd").modal("hide");
        });

        $(".Sent_To_Contact_Name_Close_Pd").click(function () {
            $("#Sent_To_Contact_Name_Modal_Pd").modal("hide");
        });

        //$("#Payment_To_Name_Pd").click(function () {

        //    $('#tbPaymentTo').DataTable().ajax.reload(null, false);
        //});

        $("#Sent_To_Contact_Name_Pd").click(function () {
            $('#tbSendToContact_Pd').DataTable().ajax.reload(null, false);
        });

        $("#Is_Settlement").change(function () {

            dynamicValidations_Payment();

            if ($("#Is_Settlement").is(":checked")) {
                $("#Is_Settlement").val(true);
            }
            else
                $("#Is_Settlement").val(false);

        });

        $("#Payment_Amount").change(function () {

            if ($("#Payment_Amount").val() != "") {
                $("#Total_Gross").val($("#Payment_Amount").val())
                $("#Total_Net").val($("#Payment_Amount").val())
                $("#Gst_Included").prop("checked", false);
            }

        });


        $("#btnSendPaymentEmail").click(function () {
            $("#subjectPayment").val("Claim Reference # " + $("#ClaimRefNo_Payment").val());
            $("#emailToPayment").val($("#payment_email").val());
            $('#sendPaymentEmailModal').modal('show');
        });


        $('#closemodPayment').click(function () {
            clearSelectorPayment();
        })


        function clearSelectorPayment() {
            var editor = $("#editorPayment").data("kendoEditor");
            editor.value("");
            $("#sendPaymentEmailModal").modal('hide');
        }

        $("#editorPayment").kendoEditor({
            resizable: {
                content: true,
                toolbar: true
            }
        });

        // apply custom sizing
        //$("textarea.small-editor").closest("table.k-editor").addClass("small-editor");

        $("#sendPaymentEmail").click(function () {
            var editor = $("#editorPayment").data("kendoEditor");
            var seri = editor.value();
            var subject = $('#subjectPayment').val();
            var to = $('#emailToPayment').val();
            //Piumi
            var model = {
                ToEmail: to,
                Subject: subject,
                IncludeAttachment: $('#chkIncludeInvoice').is(':checked'),
                PaymentId: $("#H_Paymentsid").val()
            };

            var formData = new FormData();
            var t = JSON.stringify(model);

            var encodedString = btoa(seri);
            formData.append("paymentModel", t);
            formData.append("html", encodedString);

            $.LoadingOverlay("show");

            $.ajax({
                url: "/Home/SendPaymentEmail",
                type: 'post',
                cache: false,
                contentType: false,
                processData: false,
                data: formData,
                success: function (data) {
                    //$('#successshow').show();
                    //$('#success').text("Email sent");
                    clearSelectorPayment();
                    // ..... any success code you want
                    $.LoadingOverlay("hide");
                },
                error: function (data) {
                    $.LoadingOverlay("hide");
                }
            });
        });
    });

    function dynamicValidations_Payment()
    {
        if ($('#Payee_Type :selected').text() == "") {

            $('.select2-selection.select2-selection--single').addClass("alertError");
        }
        else
            $('.select2-selection.select2-selection--single').removeClass("alertError");

        if ($("#Is_Settlement").is(":checked")) {

            $("#Reserve_Type").val("Liability Reserve");
            $("#Reserve_Type").prop("disabled", true);
            $(".Reserve_Type_Class").val("Liability Reserve");

            $("#Gst_Included").prop("checked", false);
            $("#Date_Invoice_Received").rules("remove", "required");
            $("#Payee_Type").rules("remove", "required");
            $('.select2-selection.select2-selection--single').removeClass("alertError");

            $("#Payee_Account_Name").rules("remove", "required");
            $("#Payment_Amount").rules("add", "required");
            $("#Payment_Date").rules("add", "required");

            $("#Total_Gross").val($("#Payment_Amount").val());
            $("#Total_Net").val($("#Payment_Amount").val());

            $("#Payee_Contact_Name").rules("remove", "required");

        }
        else {
            //$("#Reserve_Type").val("");
            $("#Reserve_Type").prop("disabled", false);
            $("#Date_Invoice_Received").rules("add", "required");
            $("#Payee_Type").rules("add", "required");
            $("#Payee_Account_Name").rules("add", "required");
            $("#Payment_Amount").rules("remove", "required");
            $("#Payment_Date").rules("remove", "required");
            $("#Payee_Contact_Name").rules("add", "required");

        }
    }

    function claculateGst()
    {
        //if ($("#Gst_Included").is(':checked'))
        //{
        //    var gst = ($("#Gst").val() / 100) * $("#Total_Gross").val();
        //    $("#Total_Net").val(gst.toFixed(2));
        //}
        //else {
        //    $("#Total_Net").val("");
        //}
        if ($("#Gst_Included").is(':checked')) {
            var gst = $("#Total_Gross").val() / ((100 + Number($("#Gst").val())) / 100)
            $("#Total_Net").val(gst.toFixed(2));
        }
        else {
            $("#Total_Net").val($("#Total_Gross").val());
        }
    }

    function onCompleteInvoiceUpload() {


    }

</script>